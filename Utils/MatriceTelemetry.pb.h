// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatriceTelemetry.proto

#ifndef PROTOBUF_INCLUDED_MatriceTelemetry_2eproto
#define PROTOBUF_INCLUDED_MatriceTelemetry_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_MatriceTelemetry_2eproto 

namespace protobuf_MatriceTelemetry_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_MatriceTelemetry_2eproto
namespace mtelemetry {
class Telemetry;
class TelemetryDefaultTypeInternal;
extern TelemetryDefaultTypeInternal _Telemetry_default_instance_;
}  // namespace mtelemetry
namespace google {
namespace protobuf {
template<> ::mtelemetry::Telemetry* Arena::CreateMaybeMessage<::mtelemetry::Telemetry>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mtelemetry {

// ===================================================================

class Telemetry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtelemetry.Telemetry) */ {
 public:
  Telemetry();
  virtual ~Telemetry();

  Telemetry(const Telemetry& from);

  inline Telemetry& operator=(const Telemetry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Telemetry(Telemetry&& from) noexcept
    : Telemetry() {
    *this = ::std::move(from);
  }

  inline Telemetry& operator=(Telemetry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Telemetry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Telemetry* internal_default_instance() {
    return reinterpret_cast<const Telemetry*>(
               &_Telemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Telemetry* other);
  friend void swap(Telemetry& a, Telemetry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Telemetry* New() const final {
    return CreateMaybeMessage<Telemetry>(NULL);
  }

  Telemetry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Telemetry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Telemetry& from);
  void MergeFrom(const Telemetry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Telemetry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float heading = 1;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 1;
  float heading() const;
  void set_heading(float value);

  // optional float latitude = 2;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  float latitude() const;
  void set_latitude(float value);

  // optional float longitude = 3;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  float longitude() const;
  void set_longitude(float value);

  // optional float altitude = 4;
  bool has_altitude() const;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 4;
  float altitude() const;
  void set_altitude(float value);

  // optional int32 battery = 5;
  bool has_battery() const;
  void clear_battery();
  static const int kBatteryFieldNumber = 5;
  ::google::protobuf::int32 battery() const;
  void set_battery(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtelemetry.Telemetry)
 private:
  void set_has_heading();
  void clear_has_heading();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_altitude();
  void clear_has_altitude();
  void set_has_battery();
  void clear_has_battery();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float heading_;
  float latitude_;
  float longitude_;
  float altitude_;
  ::google::protobuf::int32 battery_;
  friend struct ::protobuf_MatriceTelemetry_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Telemetry

// optional float heading = 1;
inline bool Telemetry::has_heading() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Telemetry::set_has_heading() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Telemetry::clear_has_heading() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Telemetry::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline float Telemetry::heading() const {
  // @@protoc_insertion_point(field_get:mtelemetry.Telemetry.heading)
  return heading_;
}
inline void Telemetry::set_heading(float value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:mtelemetry.Telemetry.heading)
}

// optional float latitude = 2;
inline bool Telemetry::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Telemetry::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Telemetry::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Telemetry::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float Telemetry::latitude() const {
  // @@protoc_insertion_point(field_get:mtelemetry.Telemetry.latitude)
  return latitude_;
}
inline void Telemetry::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:mtelemetry.Telemetry.latitude)
}

// optional float longitude = 3;
inline bool Telemetry::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Telemetry::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Telemetry::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Telemetry::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float Telemetry::longitude() const {
  // @@protoc_insertion_point(field_get:mtelemetry.Telemetry.longitude)
  return longitude_;
}
inline void Telemetry::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:mtelemetry.Telemetry.longitude)
}

// optional float altitude = 4;
inline bool Telemetry::has_altitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Telemetry::set_has_altitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Telemetry::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Telemetry::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline float Telemetry::altitude() const {
  // @@protoc_insertion_point(field_get:mtelemetry.Telemetry.altitude)
  return altitude_;
}
inline void Telemetry::set_altitude(float value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:mtelemetry.Telemetry.altitude)
}

// optional int32 battery = 5;
inline bool Telemetry::has_battery() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Telemetry::set_has_battery() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Telemetry::clear_has_battery() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Telemetry::clear_battery() {
  battery_ = 0;
  clear_has_battery();
}
inline ::google::protobuf::int32 Telemetry::battery() const {
  // @@protoc_insertion_point(field_get:mtelemetry.Telemetry.battery)
  return battery_;
}
inline void Telemetry::set_battery(::google::protobuf::int32 value) {
  set_has_battery();
  battery_ = value;
  // @@protoc_insertion_point(field_set:mtelemetry.Telemetry.battery)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mtelemetry

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_MatriceTelemetry_2eproto
